<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog of Jiawei Chiu</title>
    <description>A simple blog!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>2018-11-11</pubDate>
    <lastBuildDate>Sun, 11 Nov 2018 14:56:04 +0100</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Design a parking lot</title>
        <description>&lt;p&gt;Wanted to get acquainted with system design interview questions. “Designing a parking lot” seems like a typical question.&lt;/p&gt;

&lt;p&gt;Here are some resources:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=DSGsa0pu8-k&quot;&gt;Youtube video&lt;/a&gt; from “Success in Tech”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/764933/amazon-interview-question-design-an-oo-parking-lot&quot;&gt;Design an OO parking lot&lt;/a&gt; from StackOverflow.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/design-parking-lot-using-object-oriented-principles/&quot;&gt;Design an OO parking lot&lt;/a&gt; from GeeksforGeeks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main skill being tested here I think is not OO, but understanding user requirements. The question seems very vague and we need to ask many questions to understand the requirements and the scope, and learn to take hints from the interviewer.&lt;/p&gt;

&lt;p&gt;Some questions to ask:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What kinds of vehicles do we support?&lt;/li&gt;
  &lt;li&gt;What are the sizes of the parking lots?&lt;/li&gt;
  &lt;li&gt;Can a bus take up multiple parking lots?&lt;/li&gt;
  &lt;li&gt;Is there handicapped parking?&lt;/li&gt;
  &lt;li&gt;Do we need to track availability?&lt;/li&gt;
  &lt;li&gt;Do we need to optimize the placement? Or do users make API calls to put vehicle at whichever location they like? If so, we need to make sure it makes sense?&lt;/li&gt;
  &lt;li&gt;Are there multiple floors?&lt;/li&gt;
  &lt;li&gt;Do we need to worry about concurrency?&lt;/li&gt;
  &lt;li&gt;Do we need to optimize pricing?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this is the first post regarding system design interview, there are some other standard questions to ask.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How many users? How much QPS to support?&lt;/li&gt;
  &lt;li&gt;How much data needs to be stored in memory/disk?&lt;/li&gt;
  &lt;li&gt;What is the latency requirement?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, we want to lead the discussion and convince the interviewer that we have a lot of experience building large systems.&lt;/p&gt;

&lt;p&gt;There are always tradeoffs. Point them out.&lt;/p&gt;

&lt;p&gt;When discussing scalability, you want to recognize the bottlenecks. Maybe use NoSQL instead of relational databases, after some restructuring of your design.&lt;/p&gt;
</description>
        <pubDate>2018-11-11</pubDate>
        <link>/articles/2018-11/design-a-parking-lot</link>
        <guid isPermaLink="true">/articles/2018-11/design-a-parking-lot</guid>
        
        
        <category>systems</category>
        
      </item>
    
      <item>
        <title>Consistency models</title>
        <description>&lt;p&gt;Let’s take a look at this tree of &lt;a href=&quot;https://jepsen.io/consistency&quot;&gt;consistency models at jepsen.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jepsen_consistency.png&quot; alt=&quot;consistency models from jepsen.io&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The arrow means “is implied by”. For example, “strict serializable” implies both “serializable” and “linearizable”.&lt;/p&gt;

&lt;p&gt;As for the coloring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pink means “unavailable” during some types of network failures;&lt;/li&gt;
  &lt;li&gt;Orange means “sticky available”, i.e., non-faulty nodes continue to be available, assuming that clients stick to the same servers they are already talking to;&lt;/li&gt;
  &lt;li&gt;Blue means “total available”, which means every non-fault node is available, even when the network is completely down.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linearizable-versus-serializable&quot;&gt;Linearizable versus serializable&lt;/h1&gt;

&lt;p&gt;Peter Bailis gave a &lt;a href=&quot;http://www.bailis.org/blog/linearizability-versus-serializability/&quot;&gt;nice summary&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Linearizable: single-operation, single-object, real-time order.&lt;/p&gt;

&lt;p&gt;Linearizability is the C in the CAP theorem. It means writes appear to be instantaneous, i.e., atomic consistency. However, it does not care about transactions.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Serializable: multi-operation, multi-object, arbitrary total order.&lt;/p&gt;

&lt;p&gt;Serializability is about transactions. It is the I (Isolation) in ACID. It guarantees that a set of transactions (over multiple items) is equivalent to some serial execution (total ordering) of the transactions. You cannot interleave sub-operations between transactions. However, serializability does not care about the actual order of transactions. (Note: Order of operations &lt;em&gt;within&lt;/em&gt; each transaction should be preserved.)&lt;/p&gt;

&lt;p&gt;Neither linearizability nor serializability is achievable without expensive coordination. This implies no full availability. And in practice, systems implement weaker versions of these for performance purposes.&lt;/p&gt;

&lt;p&gt;Finally we have &lt;em&gt;strict serializability&lt;/em&gt;.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Strict serializable: multi-operation, multi-object, real-time order.&lt;/p&gt;

&lt;p&gt;As we expect, it means transactions appear to execute sequentially (serializable) and in addition, the order is not arbitrary, but in the obvious order — whichever transaction arrives first gets completed first.&lt;/p&gt;

&lt;h1 id=&quot;linearizable-implies-sequential-consistency&quot;&gt;Linearizable implies sequential consistency&lt;/h1&gt;

&lt;p&gt;Both sequential consistency and linearizability are about single operations. Sequential consistency is somewhat similar to serializability: it is for single operations instead of transactions. It says that no matter how you execute the operations concurrently, it is as if there is some order or permutation of these operations across all processors.&lt;/p&gt;

&lt;p&gt;Formal definition of sequential consistency:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sequential consistency only claims there exists such an order of operations (program order). Linearizability is a stronger condition and implies sequential consistency. It says there exists such an order and moreover, this order is the order in which these operations or requests arrive.&lt;/p&gt;

&lt;h1 id=&quot;serializability-implies-snapshot-isolation&quot;&gt;Serializability implies snapshot isolation&lt;/h1&gt;

&lt;p&gt;Snapshot isolation is a weaker guarantee on transactions than serializability. It is adopted in many databases, e.g., MySQL, Postgres, MongoDB, because it offers much better performance than serializability. It is commonly implemented by MVCC (multiversion concurrency control), i.e., keeping multiple versions of the same value. Common point of confusion: In SQL, “serializable” often means “snapshot isolation” only.&lt;/p&gt;

&lt;p&gt;Snapshot isolation means that every transaction operates on an &lt;em&gt;independent&lt;/em&gt; snapshot of the database. This allows multiple transactions to happen concurrently, based on the snapshots at the start of each transaction. However, if there are conflicts, say transaction 1 needed to modify an object X, but transaction 2 committed a write to X between transaction 1 start and transaction 1 commit,then transaction 1 must abort.&lt;/p&gt;

&lt;p&gt;One key feature of snapshot isolation is that when the transaction is done, its changes become visible atomically. (This seems like a basic requirement on transactions!) Hence, snapshot isolation also implies “read committed” which means there are no &lt;em&gt;dirty reads&lt;/em&gt;, i.e., we cannot observe writes from transactions which have not committed.&lt;/p&gt;

&lt;p&gt;Unlike serializability which requires a total order, snapshot isolation only requires a partial order — sub-operations in transactions may interleave in arbitrary ways as long as there are no conflicts between the transactions.&lt;/p&gt;

&lt;p&gt;Remark: If I were to build a database, I will probably go with this model as well.&lt;/p&gt;

&lt;p&gt;Most notable problem with snapshot isolation is &lt;em&gt;write skews&lt;/em&gt;. Consider the following scenario:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Transaction 1 reads variable x.&lt;/li&gt;
  &lt;li&gt;Transaction 2 reads variable y.&lt;/li&gt;
  &lt;li&gt;Transaction 1 writes the value it read to y. (y &amp;lt;- x)&lt;/li&gt;
  &lt;li&gt;Transaction 2 writes the value it read to x. (x &amp;lt;- y)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both transactions have a consistent view of the database and their write set do not overlap. However, we see that the values of x, y have been swapped. Suppose we have serializability instead and say transaction 1 completes before transaction 2. Then everything would be set to the initial value of x. There will be no swapping.&lt;/p&gt;

&lt;p&gt;Various databases have some hacks around snapshot isolation to mitigate the problem of write skews. See for example Postgres’ &lt;a href=&quot;https://drkp.net/papers/ssi-vldb12.pdf&quot;&gt;Serializable Snapshot Isolation technique&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;read-committed-total-available&quot;&gt;Read Committed (total available)&lt;/h1&gt;

&lt;p&gt;For models like “snapshot isolation”, total availability is still impossible (during network partition) because we need a snapshot which is consistent across the cluster of machines. To obtain total availability, we can consider the “read committed” model.&lt;/p&gt;

&lt;p&gt;The read committed model is a transactional multi-object model. All it says is that transactions cannot observe writes from other transactions which have not committed, i.e., no dirty reads. However, there is no constraint on the ordering. That means if transaction 1 commits a write to variable X and transaction 2 starts and reads variable X, then the value read by transaction 2 may not be the value written by transaction 1. (If we need to sync the new value of X across all machines, then we will lose availability during network partitions.)&lt;/p&gt;

&lt;p&gt;Read committed can be achieved by &lt;em&gt;locking&lt;/em&gt; on each row / key. There are some obvious problems. Say we want to count rows which fulfills a certain predicate. As we scan through rows in a transaction, we lock and unlock row by row, while concurrent transactions may be changing other rows that are not locked. If a row somehow gets shifted after the scan pointer, then it gets counted twice. If a row gets shifted before the scan pointer, then it does not get counted.&lt;/p&gt;
</description>
        <pubDate>2018-11-11</pubDate>
        <link>/articles/2018-11/consistency-models</link>
        <guid isPermaLink="true">/articles/2018-11/consistency-models</guid>
        
        
        <category>systems</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;This is a sample Jekyll post to show and test what can be done.&lt;/p&gt;

&lt;h1 id=&quot;headers&quot;&gt;Headers&lt;/h1&gt;
&lt;h1 id=&quot;header-1&quot;&gt;Header 1&lt;/h1&gt;
&lt;h2 id=&quot;header-2&quot;&gt;Header 2&lt;/h2&gt;
&lt;h3 id=&quot;header-3&quot;&gt;Header 3&lt;/h3&gt;
&lt;h4 id=&quot;header-4&quot;&gt;Header 4&lt;/h4&gt;

&lt;h1 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;/h1&gt;

&lt;p&gt;C++:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; prints 'Hi, Tom' to STDOUT.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;math&quot;&gt;Math&lt;/h1&gt;
&lt;p&gt;Fourier transform:
&lt;script type=&quot;math/tex&quot;&gt;\hat{x}_k = \int_{x\in \mathbb{R}} e^{ikx} dx.&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;/h1&gt;

&lt;p&gt;Some &lt;a href=&quot;http://google.com&quot;&gt;link&lt;/a&gt; to Google.&lt;/p&gt;

&lt;p&gt;Some formatting: &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; &lt;em&gt;italic&lt;/em&gt; &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Block quotes:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Item one
    &lt;ol&gt;
      &lt;li&gt;sub item one&lt;/li&gt;
      &lt;li&gt;sub item two&lt;/li&gt;
      &lt;li&gt;sub item three&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Item two&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Item one&lt;/li&gt;
  &lt;li&gt;Item two&lt;/li&gt;
  &lt;li&gt;Item three&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Header 1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Header 2&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Header 3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell 3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell 4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell 5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell 6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell 3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell 4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell 5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell 6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Foot 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foot 2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Foot 3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;p&gt;More prominent link by turning it into a button: (bootstrap)
&lt;a href=&quot;#&quot; class=&quot;btn btn-success&quot;&gt;Success Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn-warning&quot;&gt;Warning Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot;&gt;Danger Button&lt;/a&gt;
&lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot;&gt;Info Button&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; You can also add notices by appending &lt;code class=&quot;highlighter-rouge&quot;&gt;{: .notice}&lt;/code&gt; to a paragraph.&lt;/p&gt;

&lt;p&gt;You can add footnotes as well via &lt;code class=&quot;highlighter-rouge&quot;&gt;[^1]&lt;/code&gt;. Here is one example &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Footnote always goes to the bottom of the page.&lt;/p&gt;

&lt;p&gt;Some garbage here. Blah blah blah.&lt;/p&gt;

&lt;h1 id=&quot;testing-readability-with-lots-of-text&quot;&gt;Testing readability with lots of text&lt;/h1&gt;

&lt;p&gt;Portland in shoreditch Vice, labore typewriter pariatur hoodie fap sartorial Austin. Pinterest literally occupy Schlitz forage. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.&lt;/p&gt;

&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;

&lt;h2 id=&quot;cupidatat-90s-lo-fi-authentic-try-hard&quot;&gt;Cupidatat 90’s lo-fi authentic try-hard&lt;/h2&gt;

&lt;p&gt;In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sartorial hoodie&lt;/li&gt;
  &lt;li&gt;Labore viral forage&lt;/li&gt;
  &lt;li&gt;Tote bag selvage&lt;/li&gt;
  &lt;li&gt;DIY exercitation et id ugh tumblr church-key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.&lt;/p&gt;

&lt;p&gt;Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.&lt;/p&gt;

&lt;h2 id=&quot;forage-occaecat-cardigan-qui&quot;&gt;Forage occaecat cardigan qui&lt;/h2&gt;

&lt;p&gt;Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.&lt;/p&gt;

&lt;h2 id=&quot;hoodie-duis&quot;&gt;Hoodie Duis&lt;/h2&gt;

&lt;p&gt;Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.&lt;/p&gt;

&lt;h3 id=&quot;thundercats-ho&quot;&gt;Thundercats Ho!&lt;/h3&gt;

&lt;p&gt;Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.&lt;/p&gt;

&lt;p&gt;Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.&lt;/p&gt;

&lt;p&gt;Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Our footnote from somewhere! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>2018-11-11</pubDate>
        <link>/articles/2018-11/welcome-to-jekyll</link>
        <guid isPermaLink="true">/articles/2018-11/welcome-to-jekyll</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
